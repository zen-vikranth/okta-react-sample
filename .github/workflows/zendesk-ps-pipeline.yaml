name: Build and Deploy to AWS EKS with Helm

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  IMAGE_NAME: forecaster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Build React app
        run: yarn build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::152470986350:role/zendesk-ps-app-oidc-role-gha-assumerole   # Your role ARN
          aws-region: us-east-1

      - name: Verify identity
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          IMAGE=$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Install Helm
        env:
          HELM_VERSION: ${{ secrets.HELM_VERSION }}
        run: |
          curl -sSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          rm -rf linux-amd64
          helm version

      - name: Update Version
        run: |
          echo "IMAGE TAG: " $IMAGE
          YAML_FILE="charts/okta-react-sample/Values.yaml"
          
          # If $IMAGE does not contain a ":", append ":latest"
          IMAGE_WITH_TAG="${IMAGE}"
          if [[ "$IMAGE_WITH_TAG" != *:* ]]; then
            IMAGE_WITH_TAG="${IMAGE_WITH_TAG}:latest"
          fi

          # Extract repository part (everything before the last ":")
          IMAGE_REPO="${IMAGE_WITH_TAG%:*}"
          # Extract tag part (everything after the last ":")
          IMAGE_TAG="${IMAGE_WITH_TAG##*:}"
          
          # Now use sed to update values.yaml in place
          sed -i -E "s|^( *repository:).*|\1 \"${IMAGE_REPO}\"|" "$YAML_FILE"
          sed -i -E "s|^( *tag:).*|\1 \"${IMAGE_TAG}\"|" "$YAML_FILE"

          cat $YAML_FILE

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd

      - name: Sync ArgoCD Application
        env:
          ARGOCD_SERVER: argocdsecurecloud.zendeskservices.getbase.com
          ARGOCD_SERVICE_ACCOUNT_GA_PIPELINE_PWD: ${{ secrets.ARGOCD_SERVICE_ACCOUNT_GA_PIPELINE }}
          APP_NAME: forecaster-sandbox
        run: |
          argocd login $ARGOCD_SERVER --username argocd-svc-account-ga-pipeline --password $ARGOCD_SERVICE_ACCOUNT_GA_PIPELINE_PWD
          argocd app sync $APP_NAME
          # Optionally, wait for health/successful sync:
          argocd app wait $APP_NAME --health --timeout 300

      - name: Show the deployment status
        env:
          K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
          HELM_RELEASE: ${{ secrets.HELM_RELEASE }}
        run: |
          DEPLOY=$(kubectl get deploy -n $K8S_NAMESPACE -l app.kubernetes.io/instance=$HELM_RELEASE -o jsonpath='{.items[0].metadata.name}')
          kubectl rollout status deployment/$DEPLOY -n $K8S_NAMESPACE
